// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

enum Role {
  admin
  user
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id                String   @id @default(uuid())
  title             String
  description       String
  descriptionImages String[] @default([])
  inStock           Int
  price             Float    @default(0)
  priceInOffer      Float    @default(0)
  slug              String   @unique
  tags              String[] @default([])
  position          Int
  contentId         String   @default("") @unique

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage   ProductImage[]
  OrderItem      OrderItem[]
  ProductRatings ProductRatings[]
}

model ProductImage {
  id       Int    @id @default(autoincrement())
  url      String
  position Int

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model ProductRatings {
  id      Int     @id @default(autoincrement())
  comment String?
  rating  Int     @default(0)

  product   Product @relation(fields: [productId], references: [id])
  productId String

  user   User   @relation("UserProductRating", fields: [userId], references: [id])
  userId String @unique
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          Role      @default(user)
  image         String?

  address UserAddress?

  Order          Order[]
  ProductRatings ProductRatings? @relation("UserProductRating")
}

model UserAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiresAt DateTime?

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?

  transactionId String?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model OrderAddress {
  id         String  @id @default(uuid())
  firstName  String
  lastName   String
  address    String
  address2   String?
  postalCode String
  city       String
  phone      String
  email      String?

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}
